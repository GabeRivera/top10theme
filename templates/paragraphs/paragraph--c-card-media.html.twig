{#
/**
* @file
* Default theme implementation to display a paragraph.
*
* Available variables:
* - paragraph: Full paragraph entity.
* Only method names starting with "get", "has", or "is" and a few common
* methods such as "id", "label", and "bundle" are available. For example:
* - paragraph.getCreatedTime() will return the paragraph creation timestamp.
* - paragraph.id(): The paragraph ID.
* - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
* - paragraph.getOwnerId(): The user ID of the paragraph author.
* See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
* and methods for the paragraph object.
* - content: All paragraph items. Use {{ content }} to print them all,
* or print a subset such as {{ content.field_example }}. Use
* {{ content|without('field_example') }} to temporarily suppress the printing
* of a given child element.
* - attributes: HTML attributes for the containing element.
* The attributes.class element may contain one or more of the following
* classes:
* - paragraphs: The current template type (also known as a "theming hook").
* - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
* "Image" it would result in "paragraphs--type--image". Note that the machine
* name will often be in a short form of the human readable label.
* - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
* preview would result in: "paragraphs--view-mode--preview", and
* default: "paragraphs--view-mode--default".
* - view_mode: View mode; for example, "preview" or "full".
* - logged_in: Flag for authenticated user status. Will be true when the
* current user is a logged-in member.
* - is_admin: Flag for admin user status. Will be true when the current user
* is an administrator.
*
* @see template_preprocess_paragraph()
*
* @ingroup themeable
*/
#}

{%
set smallSize = content.field_c_card_media_width.0["#markup"]|number_format + 2
%}
{%
set card_type = content.field_card_type.0["#markup"]
%}

{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
not paragraph.isPublished() ? 'paragraph--unpublished',
'col-md-' ~ content.field_c_card_media_width.0["#markup"],
'col-sm-' ~ smallSize,
'col-xs-12',
card_type
]
%}
{%
set link_url = content.field_c_card_media_link.0['#url']
%}

{% block paragraph %}
<div {{ attributes.addClass(classes) }}>
  {% block content %}
  {% if card_type == 'Photo' %}
  <div class="card c-card-media">
    <div class="card-item card-media">
      <a href="{{ link_url }}">{{ content.field_c_card_media_image }}</a>
      <h3 class="title pull-bottom"><a href="{{ link_url }}">{{ content.field_c_card_media_title }}</a></h3>
    </div>
    <div class="card-item card-text d-flex">
      <div class="col-xs-9">
        {{ content.field_c_card_media_text }}
      </div>
      <div class="col-xs-3">
        <a href="{{ link_url }}" class="card-item-cta">
          <i class="material-icons">arrow_forward</i>
        </a>
      </div>
    </div>
  </div>
  {% else %}
  <div class="card c-card-media c-card-media--text text-align-center">
    <div class="card-text">
      <h3 class="title"><a href="{{ link_url }}">{{ content.field_c_card_media_title }}</a></h3>

      {{ content.field_c_card_media_text }}
    </div>
    <div class="card-actions">
      {{ content.field_c_card_media_link }}
    </div>
  </div>
  {% endif %}

  {% endblock %}
</div>
{% endblock paragraph %}
